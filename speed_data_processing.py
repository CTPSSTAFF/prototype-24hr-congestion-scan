# Script to process INRIX speed-run data downloaded from RITIS.
#
# Input: CSV file containing speed data for one 'route' for any number
#        of 24-hour periods (i.e., days)
#
# Intermediate output: CSV file that is a copy of the input CSV file,
#                      but only contains attributes of interest.
#                      The column names in the output CSV file are given shorter
#                      names for the sake of convenience: tmc, tstamp, speed, cvalue
#
# Final output: One CSV file containing the data for each 24-hour period
#               in the intermediate output. 
#               At least for the time being, it is the user's responsibility
#               to know, a priori, the list of dates in question.
#
#
# This script assumes that the downloaded data is organized in 10 minute units.
#
# Overall steps:
# 1. Extract only the attributes of interest from the raw data from RITIS.
#    These attributes are: tmc_code, measurement_tstamp, speed, and cvalue.
# 2. Extract one CSV file for each day's worth of data;
#    at least for now, the user is expected to know the list of dates

import csv

##########################################################################
# Step 1 - Generate a CSV file with only the attributes of interest in it.

in_fname = r's:/_congestion_data/granularity_10min/I93_NB_data/i93_nb_mid_march_2020_10min.csv'
out_fname = r's:/_congestion_data/granularity_10min/I93_NB_data/i93_nb_mid_march_2020_10min_p1.csv'

# String containing names of fields in ouput CSV files;
# these are the "attributes of interest", with shorter names
out_csv_header = 'tmc,tstamp,speed,cvalue\n'


# Step 1: Generate a CSV file with only the attributes of interest in it
#
# Function to read the raw CSV file generated by RITIS,
# and produce an output CSV file containing all the input records,
# but only with the "attributes of interest" in each row.
#
def extract_csv_with_subset_attrs(in_fname, out_fname):
    global csv_header
    out_f = open(out_fname,'w')
    out_f.write(out_csv_header)
    with open(in_fname, newline='') as csvfile:
        reader = csv.DictReader(csvfile)
        for row in reader:
            # print(row['tmc_code'], row['measurement_tstamp'], row['speed'])
            out_str = row['tmc_code'] + ',' + row['measurement_tstamp'] + ',' + row['speed'] +  ',' + row['cvalue'] + '\n'
            out_f.write(out_str)
        # end_for
    # end_with
    out_f.close()
# end_def


# The input to step 2 is the output of step 1.
# in_fn2 = out_fname
# in_fname = r's:/_congestion_data/granularity_10min/I93_NB_data/i93_nb_mid_march_2020_10min_p1.csv'
# out_fname_prefix = r's:/_congestion_data/granularity_10min/I93_NB_data/i93_nb_'

# Step 2: Extract one day's worth of data from the intermediate output
#
# Function to extract the data for one day from the intermediate output,
# and write it to a CSV file whose name has the form: i93_nb_<yyyy>-<mm>-<dd>.csv
#
# The author acknowledges the use of a large sledge hammer here.
#
def extract_data_for(in_fname, out_fname_prefix, date_str):
    global out_csv_header  
    out_fname = out_fname_prefix + date_str + '.csv'
    out_f = open(out_fname, 'w')
    out_f.write(out_csv_header)

    with open(in_fname, newline='') as csvfile:
        reader = csv.DictReader(csvfile)
        for row in reader:
            tstamp = row['tstamp']
            parts = tstamp.split(' ')
            date_part = parts[0]
            if date_part == date_str:
                out_str = row['tmc'] + ',' + row['tstamp'] + ',' + row['speed'] +  ',' + row['cvalue'] + '\n'
                out_f.write(out_str)
            # end_if
        # end_for
    # end_with
    out_f.close()
    s = 'Extraction of data for ' + date_str + ' completed.'
    print(s)
# end_def
